tr.border-none
  td.body-1
    = invoice_name
    - unless billable_metric.recurring_count_agg?
      - if billable_metric.weighted_sum_agg?
        .body-3 = I18n.t('invoice.units_prorated_per_period', period: IntervalHelper.interval_name(subscription.plan.interval))
      - if charge.percentage?
        .body-3 = I18n.t('invoice.total_events', count: events_count)
  td.body-2
  td.body-2
  td.body-2
  td.body-2
/ Fee per unit
tr.details.border-none
  td.body-2 = I18n.t('invoice.fee_per_unit')
  td.body-2 = units
  td.body-2 = MoneyHelper.format(amount_details['per_unit_amount'].to_money(amount_currency))
  td.body-2 == TaxHelper.applied_taxes(self)
  td.body-2 = MoneyHelper.format(amount_details['per_unit_total_amount'].to_money(amount_currency))
/ Flat fee for all units
tr.details.border-none
  td.body-2 = I18n.t('invoice.flat_fee_for_all_units')
  td.body-2 = 1
  td.body-2 = MoneyHelper.format(amount_details['flat_unit_amount'].to_money(amount_currency))
  td.body-2 == TaxHelper.applied_taxes(self)
  td.body-2 = MoneyHelper.format(amount_details['flat_unit_amount'].to_money(amount_currency))
/ Sub total
tr.details.subtotal
  td.body-2 = I18n.t('invoice.sub_total')
  td.body-2
  td.body-2
  td.body-2
  td.body-2 = MoneyHelper.format(amount)